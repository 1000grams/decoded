AWSTemplateFormatVersion: '2010-09-09'
Description: Backend stack for Decoded Music using Lambda, API Gateway and DynamoDB
Resources:
  BackendTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DecodedMusicItems
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: dynamodb-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DecodedMusicBackendHandler
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt BackendLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref BackendTable
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('request:', JSON.stringify(event));
            return { statusCode: 200, body: 'ok' };
          };
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DecodedMusicBackendApi
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: backend
      RestApiId: !Ref ApiGateway
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations'
  LambdaPermissionApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackendLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/backend'

  PitchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PitchHandler
      Handler: index.handler
      Role: !GetAtt PitchLambdaRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: decodedmusic-lambda-code
        S3Key: pitchHandler.zip

  PitchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PitchLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSESSend
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"

  PitchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PitchAPI

  PitchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PitchApi.RootResourceId
      PathPart: pitch
      RestApiId: !Ref PitchApi

  PitchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref PitchResource
      RestApiId: !Ref PitchApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PitchLambda.Arn}/invocations

  PitchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PitchLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PitchApi}/*/POST/pitch
Outputs:
  ApiUrl:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/backend'
    Description: Endpoint for the DecodedMusicBackend API
  PitchApiUrl:
    Value: !Sub 'https://${PitchApi}.execute-api.${AWS::Region}.amazonaws.com/prod/pitch'
    Description: Endpoint for sync licensing pitches
